{"ast":null,"code":"import { useState, useEffect, useCallback, useMemo, useLayoutEffect } from 'react';\nimport { useThemeUI, jsx as jsx$1, __ThemeUIInternalBaseThemeProvider } from '@theme-ui/core';\nimport { css, get } from '@theme-ui/css';\nimport { Global } from '@emotion/react';\nimport { jsx, jsxs } from '@theme-ui/core/jsx-runtime';\nconst toVarName = key => `--theme-ui-${key.replace('-__default', '')}`;\nconst toVarValue = key => `var(${toVarName(key)})`;\nconst join = (...args) => args.filter(Boolean).join('-');\nconst reservedKeys = new Set(['useCustomProperties', 'initialColorModeName', 'printColorModeName', 'initialColorMode', 'useLocalStorage', 'config']);\n\n// convert theme values to custom properties\nconst toCustomProperties = (obj, parent) => {\n  const next = Array.isArray(obj) ? [] : {};\n  for (let key in obj) {\n    const value = obj[key];\n    const name = join(parent, key);\n    if (value && typeof value === 'object') {\n      next[key] = toCustomProperties(value, name);\n      continue;\n    }\n    if (reservedKeys.has(key)) {\n      next[key] = value;\n      continue;\n    }\n    next[key] = toVarValue(name);\n  }\n  return next;\n};\n\n/**\n * @internal\n * Recursively transforms an object into CSS variables excluding \"modes\" key.\n */\nconst __objectToVars = (parent, obj) => {\n  let vars = {};\n  for (let key in obj) {\n    if (key === 'modes') continue;\n    const name = join(parent, key);\n    const value = obj[key];\n    if (value && typeof value === 'object') {\n      vars = {\n        ...vars,\n        ...__objectToVars(name, value)\n      };\n    } else {\n      vars[toVarName(name)] = value;\n    }\n  }\n  return vars;\n};\n\n/**\n * @internal\n * Creates root styles for color modes.\n * - Transforms color scale into CSS variables.\n * - Sets background and text color.\n */\nconst __createColorStyles = (theme = {}) => {\n  const {\n    useCustomProperties,\n    initialColorModeName,\n    printColorModeName,\n    useRootStyles\n  } = theme.config || theme || {};\n  const colors = theme.rawColors || theme.colors;\n  if (!colors || useRootStyles === false) return {};\n  if (useCustomProperties === false) {\n    return css({\n      color: 'text',\n      bg: 'background'\n    })(theme);\n  }\n  const modes = colors.modes || {};\n  const styles = __createColorProperties(colors, modes);\n  if (printColorModeName) {\n    let printMode = modes[printColorModeName];\n    if (!printMode && printColorModeName === initialColorModeName) printMode = colors;\n    if (printMode) {\n      styles['@media print'] = __objectToVars('colors', printMode);\n    } else {\n      console.error(`Theme UI \\`printColorModeName\\` was not found in colors scale`, {\n        colors,\n        printColorModeName\n      });\n    }\n  }\n  const colorToVarValue = color => toVarValue(`colors-${color}`);\n  return css({\n    ...styles,\n    color: colorToVarValue('text'),\n    bg: colorToVarValue('background')\n  })(theme);\n};\n\n/**\n * @internal\n * Returns an object with colors turned into Custom CSS Properties and\n * .theme-ui-<colormode> classes used for no-flash serverside rendering.\n */\nfunction __createColorProperties(colors, modes) {\n  const styles = __objectToVars('colors', colors);\n  Object.keys(modes).forEach(mode => {\n    const className = `.theme-ui-${mode}`;\n    const key = `&${className}, ${className} &`;\n    styles[key] = __objectToVars('colors', modes[mode]);\n  });\n  return styles;\n}\nconst STORAGE_KEY = 'theme-ui-color-mode';\nconst DARK_QUERY = '(prefers-color-scheme: dark)';\nconst LIGHT_QUERY = '(prefers-color-scheme: light)';\nconst storage = {\n  get: () => {\n    try {\n      return window.localStorage.getItem(STORAGE_KEY);\n    } catch (err) {\n      console.warn('localStorage is disabled and color mode might not work as expected.', 'Please check your Site Settings.', err);\n    }\n  },\n  set: value => {\n    try {\n      window.localStorage.setItem(STORAGE_KEY, value);\n    } catch (err) {\n      console.warn('localStorage is disabled and color mode might not work as expected.', 'Please check your Site Settings.', err);\n    }\n  }\n};\nconst getPreferredColorScheme = () => {\n  if (typeof window !== 'undefined' && window.matchMedia) {\n    if (window.matchMedia(DARK_QUERY).matches) {\n      return 'dark';\n    }\n    if (window.matchMedia(LIGHT_QUERY).matches) {\n      return 'light';\n    }\n  }\n  return null;\n};\nconst useClientsideEffect = typeof window === 'undefined' ? () => {} : useLayoutEffect;\nconst TopLevelColorModeProvider = ({\n  outerCtx,\n  children\n}) => {\n  const outerTheme = outerCtx.theme || {};\n  const {\n    initialColorModeName,\n    useColorSchemeMediaQuery,\n    useLocalStorage\n  } = outerTheme.config || outerTheme;\n  let [colorMode, setColorMode] = useState(() => {\n    const preferredMode = useColorSchemeMediaQuery !== false && getPreferredColorScheme();\n    return preferredMode || initialColorModeName;\n  });\n\n  // on first render, we read the color mode from localStorage and\n  // clear the class on document element body\n  useClientsideEffect(() => {\n    const stored = useLocalStorage !== false && storage.get();\n    if (typeof document !== 'undefined') {\n      document.documentElement.classList.remove('theme-ui-' + stored);\n    }\n    if (useColorSchemeMediaQuery !== 'system' && stored && stored !== colorMode) {\n      colorMode = stored;\n      setColorMode(stored);\n    }\n  }, []);\n\n  // when mode changes, we save it to localStorage\n  useEffect(() => {\n    if (colorMode && useLocalStorage !== false) {\n      storage.set(colorMode);\n    }\n  }, [colorMode, useLocalStorage]);\n  const setPreferredColorScheme = useCallback(() => {\n    const preferredColorScheme = getPreferredColorScheme();\n    setColorMode(preferredColorScheme || initialColorModeName);\n  }, [initialColorModeName]);\n  useEffect(() => {\n    if (useColorSchemeMediaQuery === 'system' && window.matchMedia) {\n      // It doesn't matter if we add the listener only to the dark media query\n      // Because in our callback function we'll check for both media queries (light and dark).\n      const darkMQL = window.matchMedia(DARK_QUERY);\n      if (typeof darkMQL.addEventListener === 'function') {\n        darkMQL.addEventListener('change', setPreferredColorScheme);\n      } else if (typeof darkMQL.addListener === 'function') {\n        darkMQL.addListener(setPreferredColorScheme);\n      }\n    }\n    return () => {\n      if (useColorSchemeMediaQuery === 'system' && window.matchMedia) {\n        const darkMQL = window.matchMedia(DARK_QUERY);\n        if (typeof darkMQL.removeEventListener === 'function') {\n          darkMQL.removeEventListener('change', setPreferredColorScheme);\n        } else if (typeof darkMQL.removeListener === 'function') {\n          darkMQL.removeListener(setPreferredColorScheme);\n        }\n      }\n    };\n  }, [useColorSchemeMediaQuery, setPreferredColorScheme]);\n  if (process.env.NODE_ENV !== 'production') {\n    var _outerTheme$colors, _outerTheme$colors2;\n    if ((_outerTheme$colors = outerTheme.colors) != null && _outerTheme$colors.modes && initialColorModeName && Object.keys(outerTheme.colors.modes).indexOf(initialColorModeName) > -1) {\n      console.warn('[theme-ui] The `initialColorModeName` value should be a unique name' + ' and cannot reference a key in `theme.colors.modes`.');\n    }\n    const allColorKeys = [];\n    const flattenKeys = obj => {\n      Object.keys(obj).forEach(key => {\n        allColorKeys.push(key);\n        if (typeof obj[key] === 'object') {\n          flattenKeys(obj[key]);\n        }\n      });\n      return allColorKeys;\n    };\n    flattenKeys((_outerTheme$colors2 = outerTheme.colors) != null ? _outerTheme$colors2 : {}).forEach(color => {\n      if (color !== color.trim()) {\n        console.warn(`[theme-ui] Key \\`${color}\\` in theme.colors contains leading/trailing ` + 'whitespace, which can cause bugs in your project.');\n      }\n    });\n  }\n  const newTheme = useThemeWithAppliedColorMode({\n    colorMode,\n    outerTheme\n  });\n  const newCtx = {\n    ...outerCtx,\n    theme: newTheme,\n    colorMode,\n    setColorMode\n  };\n  return jsxs(__ThemeUIInternalBaseThemeProvider, {\n    context: newCtx,\n    children: [jsx(GlobalColorStyles, {\n      theme: newTheme\n    }), children]\n  });\n};\nfunction useColorMode() {\n  const {\n    colorMode,\n    setColorMode\n  } = useThemeUI();\n  if (typeof setColorMode !== 'function') {\n    throw new Error(`[useColorMode] requires the ColorModeProvider component`);\n  }\n\n  // We're allowing the user to specify a narrower type for its color mode name.\n  return [colorMode, setColorMode];\n}\nconst omitModes = colors => {\n  const res = {\n    ...colors\n  };\n  delete res.modes;\n  return res;\n};\nfunction copyRawColors(colors, outerThemeRawColors) {\n  for (const [key, value] of Object.entries(colors)) {\n    if (typeof value === 'string' && !value.startsWith('var(')) {\n      outerThemeRawColors[key] = value;\n    } else if (typeof value === 'object') {\n      const newValue = {\n        ...outerThemeRawColors[key]\n      };\n      copyRawColors(value, newValue);\n      outerThemeRawColors[key] = newValue;\n    }\n  }\n}\nfunction useThemeWithAppliedColorMode({\n  outerTheme,\n  colorMode\n}) {\n  const theme = useMemo(() => {\n    const res = {\n      ...outerTheme\n    };\n    const modes = get(res, 'colors.modes', {});\n    const currentColorMode = get(modes, colorMode, {});\n    if (colorMode) {\n      res.colors = {\n        ...res.colors,\n        ...currentColorMode\n      };\n    }\n    const {\n      useCustomProperties,\n      initialColorModeName = '__default'\n    } = outerTheme.config || outerTheme;\n    let outerThemeRawColors = outerTheme.rawColors || outerTheme.colors || {};\n    if (useCustomProperties !== false) {\n      const alreadyHasRawColors = res.rawColors != null;\n      const colors = res.colors || {};\n      if (alreadyHasRawColors) {\n        outerThemeRawColors = {\n          ...outerThemeRawColors\n        };\n        copyRawColors(colors, outerThemeRawColors);\n        if (outerThemeRawColors.modes) {\n          outerThemeRawColors.modes[initialColorModeName] = omitModes(outerThemeRawColors);\n        }\n        res.rawColors = outerThemeRawColors;\n      } else {\n        if (!('modes' in outerThemeRawColors)) {\n          res.rawColors = colors;\n        } else {\n          const modes = {\n            [initialColorModeName]: omitModes(outerThemeRawColors),\n            ...outerThemeRawColors.modes\n          };\n          res.rawColors = {\n            ...colors,\n            modes\n          }; /* modes doesn't match index signature by design */\n        }\n      }\n\n      res.colors = toCustomProperties(omitModes(outerThemeRawColors), 'colors');\n    }\n    return res;\n  }, [colorMode, outerTheme]);\n  return theme;\n}\nfunction GlobalColorStyles({\n  theme\n}) {\n  return jsx$1(Global, {\n    styles: () => {\n      return {\n        html: __createColorStyles(theme)\n      };\n    }\n  });\n}\nfunction NestedColorModeProvider({\n  outerCtx,\n  children\n}) {\n  var _newTheme$config2;\n  const newTheme = useThemeWithAppliedColorMode({\n    outerTheme: outerCtx.theme,\n    colorMode: outerCtx.colorMode\n  });\n\n  // Nested theme providers need to be rerendered after hydration for the correct\n  // color mode to apply.\n  const [needsRerender, setNeedsRerender] = useState(\n  // Note: we could also check some \"ssr-enabled\" flag as an optimization for\n  // SPAs, as deeply nested theme providers will also pay a performance penalty\n  // for this SSR bug fix\n  () => {\n    var _newTheme$config;\n    return ((_newTheme$config = newTheme.config) == null ? void 0 : _newTheme$config.useLocalStorage) !== false;\n  });\n  useClientsideEffect(() => void setNeedsRerender(false), []);\n  const themeColors = newTheme.rawColors || newTheme.colors;\n  const useCustomProperties = (_newTheme$config2 = newTheme.config) == null ? void 0 : _newTheme$config2.useCustomProperties;\n  const colorVars = useMemo(() => {\n    if (useCustomProperties === false) {\n      return {};\n    }\n    const colors = themeColors || {};\n    return css(__createColorProperties(colors, colors.modes || {}))(newTheme);\n  }, [newTheme, themeColors, useCustomProperties]);\n  return jsx(__ThemeUIInternalBaseThemeProvider, {\n    context: {\n      ...outerCtx,\n      theme: newTheme\n    },\n    children: jsx$1('div', {\n      'data-themeui-nested-provider': true,\n      // the key here ensures that children will be rerendered after color\n      // mode is read from localStorage\n      key: Number(needsRerender),\n      suppressHydrationWarning: true,\n      css: colorVars,\n      children\n    })\n  });\n}\nconst ColorModeProvider = ({\n  children\n}) => {\n  const outerCtx = useThemeUI();\n  const isTopLevelColorModeProvider = typeof outerCtx.setColorMode !== 'function';\n  return isTopLevelColorModeProvider ? jsx(TopLevelColorModeProvider, {\n    outerCtx: outerCtx,\n    children: children\n  }) : jsx(NestedColorModeProvider, {\n    outerCtx: outerCtx,\n    children: children\n  });\n};\nconst noflash = `(function() { try {\n  var mode = localStorage.getItem('theme-ui-color-mode');\n  if (!mode) return\n  document.documentElement.classList.add('theme-ui-' + mode);\n} catch (e) {} })();`;\nconst InitializeColorMode = () => jsx$1('script', {\n  key: 'theme-ui-no-flash',\n  dangerouslySetInnerHTML: {\n    __html: noflash\n  }\n});\nexport { ColorModeProvider, InitializeColorMode, useColorMode };","map":{"version":3,"names":["useState","useEffect","useCallback","useMemo","useLayoutEffect","useThemeUI","jsx","jsx$1","__ThemeUIInternalBaseThemeProvider","css","get","Global","jsxs","toVarName","key","replace","toVarValue","join","args","filter","Boolean","reservedKeys","Set","toCustomProperties","obj","parent","next","Array","isArray","value","name","has","__objectToVars","vars","__createColorStyles","theme","useCustomProperties","initialColorModeName","printColorModeName","useRootStyles","config","colors","rawColors","color","bg","modes","styles","__createColorProperties","printMode","console","error","colorToVarValue","Object","keys","forEach","mode","className","STORAGE_KEY","DARK_QUERY","LIGHT_QUERY","storage","window","localStorage","getItem","err","warn","set","setItem","getPreferredColorScheme","matchMedia","matches","useClientsideEffect","TopLevelColorModeProvider","outerCtx","children","outerTheme","useColorSchemeMediaQuery","useLocalStorage","colorMode","setColorMode","preferredMode","stored","document","documentElement","classList","remove","setPreferredColorScheme","preferredColorScheme","darkMQL","addEventListener","addListener","removeEventListener","removeListener","process","env","NODE_ENV","_outerTheme$colors","_outerTheme$colors2","indexOf","allColorKeys","flattenKeys","push","trim","newTheme","useThemeWithAppliedColorMode","newCtx","context","GlobalColorStyles","useColorMode","Error","omitModes","res","copyRawColors","outerThemeRawColors","entries","startsWith","newValue","currentColorMode","alreadyHasRawColors","html","NestedColorModeProvider","_newTheme$config2","needsRerender","setNeedsRerender","_newTheme$config","themeColors","colorVars","Number","suppressHydrationWarning","ColorModeProvider","isTopLevelColorModeProvider","noflash","InitializeColorMode","dangerouslySetInnerHTML","__html"],"sources":["D:/websitepracticereact/node_modules/@theme-ui/color-modes/dist/theme-ui-color-modes.esm.js"],"sourcesContent":["import { useState, useEffect, useCallback, useMemo, useLayoutEffect } from 'react';\nimport { useThemeUI, jsx as jsx$1, __ThemeUIInternalBaseThemeProvider } from '@theme-ui/core';\nimport { css, get } from '@theme-ui/css';\nimport { Global } from '@emotion/react';\nimport { jsx, jsxs } from '@theme-ui/core/jsx-runtime';\n\nconst toVarName = key => `--theme-ui-${key.replace('-__default', '')}`;\nconst toVarValue = key => `var(${toVarName(key)})`;\nconst join = (...args) => args.filter(Boolean).join('-');\nconst reservedKeys = new Set(['useCustomProperties', 'initialColorModeName', 'printColorModeName', 'initialColorMode', 'useLocalStorage', 'config']);\n\n// convert theme values to custom properties\nconst toCustomProperties = (obj, parent) => {\n  const next = Array.isArray(obj) ? [] : {};\n  for (let key in obj) {\n    const value = obj[key];\n    const name = join(parent, key);\n    if (value && typeof value === 'object') {\n      next[key] = toCustomProperties(value, name);\n      continue;\n    }\n    if (reservedKeys.has(key)) {\n      next[key] = value;\n      continue;\n    }\n    next[key] = toVarValue(name);\n  }\n  return next;\n};\n\n/**\n * @internal\n * Recursively transforms an object into CSS variables excluding \"modes\" key.\n */\nconst __objectToVars = (parent, obj) => {\n  let vars = {};\n  for (let key in obj) {\n    if (key === 'modes') continue;\n    const name = join(parent, key);\n    const value = obj[key];\n    if (value && typeof value === 'object') {\n      vars = {\n        ...vars,\n        ...__objectToVars(name, value)\n      };\n    } else {\n      vars[toVarName(name)] = value;\n    }\n  }\n  return vars;\n};\n\n/**\n * @internal\n * Creates root styles for color modes.\n * - Transforms color scale into CSS variables.\n * - Sets background and text color.\n */\nconst __createColorStyles = (theme = {}) => {\n  const {\n    useCustomProperties,\n    initialColorModeName,\n    printColorModeName,\n    useRootStyles\n  } = theme.config || theme || {};\n  const colors = theme.rawColors || theme.colors;\n  if (!colors || useRootStyles === false) return {};\n  if (useCustomProperties === false) {\n    return css({\n      color: 'text',\n      bg: 'background'\n    })(theme);\n  }\n  const modes = colors.modes || {};\n  const styles = __createColorProperties(colors, modes);\n  if (printColorModeName) {\n    let printMode = modes[printColorModeName];\n    if (!printMode && printColorModeName === initialColorModeName) printMode = colors;\n    if (printMode) {\n      styles['@media print'] = __objectToVars('colors', printMode);\n    } else {\n      console.error(`Theme UI \\`printColorModeName\\` was not found in colors scale`, {\n        colors,\n        printColorModeName\n      });\n    }\n  }\n  const colorToVarValue = color => toVarValue(`colors-${color}`);\n  return css({\n    ...styles,\n    color: colorToVarValue('text'),\n    bg: colorToVarValue('background')\n  })(theme);\n};\n\n/**\n * @internal\n * Returns an object with colors turned into Custom CSS Properties and\n * .theme-ui-<colormode> classes used for no-flash serverside rendering.\n */\nfunction __createColorProperties(colors, modes) {\n  const styles = __objectToVars('colors', colors);\n  Object.keys(modes).forEach(mode => {\n    const className = `.theme-ui-${mode}`;\n    const key = `&${className}, ${className} &`;\n    styles[key] = __objectToVars('colors', modes[mode]);\n  });\n  return styles;\n}\n\nconst STORAGE_KEY = 'theme-ui-color-mode';\nconst DARK_QUERY = '(prefers-color-scheme: dark)';\nconst LIGHT_QUERY = '(prefers-color-scheme: light)';\nconst storage = {\n  get: () => {\n    try {\n      return window.localStorage.getItem(STORAGE_KEY);\n    } catch (err) {\n      console.warn('localStorage is disabled and color mode might not work as expected.', 'Please check your Site Settings.', err);\n    }\n  },\n  set: value => {\n    try {\n      window.localStorage.setItem(STORAGE_KEY, value);\n    } catch (err) {\n      console.warn('localStorage is disabled and color mode might not work as expected.', 'Please check your Site Settings.', err);\n    }\n  }\n};\nconst getPreferredColorScheme = () => {\n  if (typeof window !== 'undefined' && window.matchMedia) {\n    if (window.matchMedia(DARK_QUERY).matches) {\n      return 'dark';\n    }\n    if (window.matchMedia(LIGHT_QUERY).matches) {\n      return 'light';\n    }\n  }\n  return null;\n};\nconst useClientsideEffect = typeof window === 'undefined' ? () => {} : useLayoutEffect;\nconst TopLevelColorModeProvider = ({\n  outerCtx,\n  children\n}) => {\n  const outerTheme = outerCtx.theme || {};\n  const {\n    initialColorModeName,\n    useColorSchemeMediaQuery,\n    useLocalStorage\n  } = outerTheme.config || outerTheme;\n  let [colorMode, setColorMode] = useState(() => {\n    const preferredMode = useColorSchemeMediaQuery !== false && getPreferredColorScheme();\n    return preferredMode || initialColorModeName;\n  });\n\n  // on first render, we read the color mode from localStorage and\n  // clear the class on document element body\n  useClientsideEffect(() => {\n    const stored = useLocalStorage !== false && storage.get();\n    if (typeof document !== 'undefined') {\n      document.documentElement.classList.remove('theme-ui-' + stored);\n    }\n    if (useColorSchemeMediaQuery !== 'system' && stored && stored !== colorMode) {\n      colorMode = stored;\n      setColorMode(stored);\n    }\n  }, []);\n\n  // when mode changes, we save it to localStorage\n  useEffect(() => {\n    if (colorMode && useLocalStorage !== false) {\n      storage.set(colorMode);\n    }\n  }, [colorMode, useLocalStorage]);\n  const setPreferredColorScheme = useCallback(() => {\n    const preferredColorScheme = getPreferredColorScheme();\n    setColorMode(preferredColorScheme || initialColorModeName);\n  }, [initialColorModeName]);\n  useEffect(() => {\n    if (useColorSchemeMediaQuery === 'system' && window.matchMedia) {\n      // It doesn't matter if we add the listener only to the dark media query\n      // Because in our callback function we'll check for both media queries (light and dark).\n      const darkMQL = window.matchMedia(DARK_QUERY);\n      if (typeof darkMQL.addEventListener === 'function') {\n        darkMQL.addEventListener('change', setPreferredColorScheme);\n      } else if (typeof darkMQL.addListener === 'function') {\n        darkMQL.addListener(setPreferredColorScheme);\n      }\n    }\n    return () => {\n      if (useColorSchemeMediaQuery === 'system' && window.matchMedia) {\n        const darkMQL = window.matchMedia(DARK_QUERY);\n        if (typeof darkMQL.removeEventListener === 'function') {\n          darkMQL.removeEventListener('change', setPreferredColorScheme);\n        } else if (typeof darkMQL.removeListener === 'function') {\n          darkMQL.removeListener(setPreferredColorScheme);\n        }\n      }\n    };\n  }, [useColorSchemeMediaQuery, setPreferredColorScheme]);\n  if (process.env.NODE_ENV !== 'production') {\n    var _outerTheme$colors, _outerTheme$colors2;\n    if ((_outerTheme$colors = outerTheme.colors) != null && _outerTheme$colors.modes && initialColorModeName && Object.keys(outerTheme.colors.modes).indexOf(initialColorModeName) > -1) {\n      console.warn('[theme-ui] The `initialColorModeName` value should be a unique name' + ' and cannot reference a key in `theme.colors.modes`.');\n    }\n    const allColorKeys = [];\n    const flattenKeys = obj => {\n      Object.keys(obj).forEach(key => {\n        allColorKeys.push(key);\n        if (typeof obj[key] === 'object') {\n          flattenKeys(obj[key]);\n        }\n      });\n      return allColorKeys;\n    };\n    flattenKeys((_outerTheme$colors2 = outerTheme.colors) != null ? _outerTheme$colors2 : {}).forEach(color => {\n      if (color !== color.trim()) {\n        console.warn(`[theme-ui] Key \\`${color}\\` in theme.colors contains leading/trailing ` + 'whitespace, which can cause bugs in your project.');\n      }\n    });\n  }\n  const newTheme = useThemeWithAppliedColorMode({\n    colorMode,\n    outerTheme\n  });\n  const newCtx = {\n    ...outerCtx,\n    theme: newTheme,\n    colorMode,\n    setColorMode\n  };\n  return jsxs(__ThemeUIInternalBaseThemeProvider, {\n    context: newCtx,\n    children: [jsx(GlobalColorStyles, {\n      theme: newTheme\n    }), children]\n  });\n};\nfunction useColorMode() {\n  const {\n    colorMode,\n    setColorMode\n  } = useThemeUI();\n  if (typeof setColorMode !== 'function') {\n    throw new Error(`[useColorMode] requires the ColorModeProvider component`);\n  }\n\n  // We're allowing the user to specify a narrower type for its color mode name.\n  return [colorMode, setColorMode];\n}\nconst omitModes = colors => {\n  const res = {\n    ...colors\n  };\n  delete res.modes;\n  return res;\n};\nfunction copyRawColors(colors, outerThemeRawColors) {\n  for (const [key, value] of Object.entries(colors)) {\n    if (typeof value === 'string' && !value.startsWith('var(')) {\n      outerThemeRawColors[key] = value;\n    } else if (typeof value === 'object') {\n      const newValue = {\n        ...outerThemeRawColors[key]\n      };\n      copyRawColors(value, newValue);\n      outerThemeRawColors[key] = newValue;\n    }\n  }\n}\nfunction useThemeWithAppliedColorMode({\n  outerTheme,\n  colorMode\n}) {\n  const theme = useMemo(() => {\n    const res = {\n      ...outerTheme\n    };\n    const modes = get(res, 'colors.modes', {});\n    const currentColorMode = get(modes, colorMode, {});\n    if (colorMode) {\n      res.colors = {\n        ...res.colors,\n        ...currentColorMode\n      };\n    }\n    const {\n      useCustomProperties,\n      initialColorModeName = '__default'\n    } = outerTheme.config || outerTheme;\n    let outerThemeRawColors = outerTheme.rawColors || outerTheme.colors || {};\n    if (useCustomProperties !== false) {\n      const alreadyHasRawColors = res.rawColors != null;\n      const colors = res.colors || {};\n      if (alreadyHasRawColors) {\n        outerThemeRawColors = {\n          ...outerThemeRawColors\n        };\n        copyRawColors(colors, outerThemeRawColors);\n        if (outerThemeRawColors.modes) {\n          outerThemeRawColors.modes[initialColorModeName] = omitModes(outerThemeRawColors);\n        }\n        res.rawColors = outerThemeRawColors;\n      } else {\n        if (!('modes' in outerThemeRawColors)) {\n          res.rawColors = colors;\n        } else {\n          const modes = {\n            [initialColorModeName]: omitModes(outerThemeRawColors),\n            ...outerThemeRawColors.modes\n          };\n          res.rawColors = {\n            ...colors,\n            modes\n          }; /* modes doesn't match index signature by design */\n        }\n      }\n\n      res.colors = toCustomProperties(omitModes(outerThemeRawColors), 'colors');\n    }\n    return res;\n  }, [colorMode, outerTheme]);\n  return theme;\n}\nfunction GlobalColorStyles({\n  theme\n}) {\n  return jsx$1(Global, {\n    styles: () => {\n      return {\n        html: __createColorStyles(theme)\n      };\n    }\n  });\n}\nfunction NestedColorModeProvider({\n  outerCtx,\n  children\n}) {\n  var _newTheme$config2;\n  const newTheme = useThemeWithAppliedColorMode({\n    outerTheme: outerCtx.theme,\n    colorMode: outerCtx.colorMode\n  });\n\n  // Nested theme providers need to be rerendered after hydration for the correct\n  // color mode to apply.\n  const [needsRerender, setNeedsRerender] = useState(\n  // Note: we could also check some \"ssr-enabled\" flag as an optimization for\n  // SPAs, as deeply nested theme providers will also pay a performance penalty\n  // for this SSR bug fix\n  () => {\n    var _newTheme$config;\n    return ((_newTheme$config = newTheme.config) == null ? void 0 : _newTheme$config.useLocalStorage) !== false;\n  });\n  useClientsideEffect(() => void setNeedsRerender(false), []);\n  const themeColors = newTheme.rawColors || newTheme.colors;\n  const useCustomProperties = (_newTheme$config2 = newTheme.config) == null ? void 0 : _newTheme$config2.useCustomProperties;\n  const colorVars = useMemo(() => {\n    if (useCustomProperties === false) {\n      return {};\n    }\n    const colors = themeColors || {};\n    return css(__createColorProperties(colors, colors.modes || {}))(newTheme);\n  }, [newTheme, themeColors, useCustomProperties]);\n  return jsx(__ThemeUIInternalBaseThemeProvider, {\n    context: {\n      ...outerCtx,\n      theme: newTheme\n    },\n    children: jsx$1('div', {\n      'data-themeui-nested-provider': true,\n      // the key here ensures that children will be rerendered after color\n      // mode is read from localStorage\n      key: Number(needsRerender),\n      suppressHydrationWarning: true,\n      css: colorVars,\n      children\n    })\n  });\n}\nconst ColorModeProvider = ({\n  children\n}) => {\n  const outerCtx = useThemeUI();\n  const isTopLevelColorModeProvider = typeof outerCtx.setColorMode !== 'function';\n  return isTopLevelColorModeProvider ? jsx(TopLevelColorModeProvider, {\n    outerCtx: outerCtx,\n    children: children\n  }) : jsx(NestedColorModeProvider, {\n    outerCtx: outerCtx,\n    children: children\n  });\n};\nconst noflash = `(function() { try {\n  var mode = localStorage.getItem('theme-ui-color-mode');\n  if (!mode) return\n  document.documentElement.classList.add('theme-ui-' + mode);\n} catch (e) {} })();`;\nconst InitializeColorMode = () => jsx$1('script', {\n  key: 'theme-ui-no-flash',\n  dangerouslySetInnerHTML: {\n    __html: noflash\n  }\n});\n\nexport { ColorModeProvider, InitializeColorMode, useColorMode };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}